/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2017-11-01 07:27:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.chatting;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import donation.category.vo.Category;
import java.sql.Date;
import java.util.*;
import donation.member.model.vo.Member;
import donation.member.model.vo.Member;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/views/chatting/../../header.jsp", Long.valueOf(1509511996142L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("donation.category.vo.Category");
    _jspx_imports_classes.add("donation.member.model.vo.Member");
    _jspx_imports_classes.add("java.sql.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 객체 생성 request 로 받음 -->\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
 String reciver = String.valueOf(request.getAttribute("reciver")); 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("   <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Chatting</title>   \r\n");
      out.write("     \r\n");
      out.write("    <meta name=\"description\" content=\"\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \r\n");
      out.write("    \r\n");
      out.write("    <link href=\"/semi/css/suggest/suggest.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\" />\r\n");
      out.write("   \r\n");
      out.write("   <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700,800' rel='stylesheet' type='text/css'>\r\n");
      out.write("        \r\n");
      out.write("        <link rel=\"stylesheet\" href=\"/semi/css/bootstrap.min.css\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"/semi/css/font-awesome.css\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"/semi/css/animate.css\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"/semi/css/templatemo_misc.css\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"/semi/css/templatemo_style.css\">\r\n");
      out.write("        <script src=\"/semi/js/vendor/modernizr-2.6.1-respond-1.1.0.min.js\"></script>\r\n");
      out.write("        <script src=\"/semi/js/jquery-3.2.1.min.js\"></script> \r\n");
      out.write("    \r\n");
      out.write("         \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   \t");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    ");
 Member member = (Member)session.getAttribute("member"); 
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>header</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("div#loginbar{\r\n");
      out.write("\tfloat:right;\r\n");
      out.write("\tmargin-right:50px;\r\n");
      out.write("\tmargin-top:5px;\r\n");
      out.write("\tfont-size:10pt;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=loginbar>\r\n");
 if(member ==null){ 
      out.write("\r\n");
      out.write("\t<a href=\"/semi/views/member/Login.jsp\">로그인</a>\r\n");
      out.write("\t<a href=\"/semi/mlist\" style=\"margin-left:10px;\">회원가입</a>\r\n");
 }else{ 
      out.write("\r\n");
      out.write("\t<a href=\"/semi/minfor?userid=");
      out.print(member.getMemberId());
      out.write('"');
      out.write('>');
      out.print(member.getMemberNik() );
      out.write("</a>님 환영합니다.\r\n");
      out.write("\t<a href=\"#\" style=\"margin-left:10px;\" onclick=\"logout();\">로그아웃</a>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("function logout(){\r\n");
      out.write("\tlocation.href = \"/semi/logout?userid=");
      out.print(member.getMemberId() );
      out.write("\" \r\n");
      out.write("\t\t\talert(\"로그아웃되었습니다.\");\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
 } 
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("   \t<br>\r\n");
      out.write("\t<!-- 채팅 폼 -->\r\n");
      out.write("\t<div id=\"_chatbox\" style=\"margin:50px; width:auto;\">\r\n");
      out.write("   <fieldset>\r\n");
      out.write("   <table>\r\n");
      out.write("      <tr>\r\n");
      out.write("         <td colspan=\"3\"><textarea id=\"messageWindow\" rows=\"10\" cols=\"50\" readonly=\"true\"></textarea></td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("         <td colspan=\"2\"><input id=\"inputMessage\" type=\"text\" onkeydown=\"if(event.keyCode==13){send();}\" style=\"width:337px;\"></td>\r\n");
      out.write("         <td><input type=\"submit\" value=\"send\" onclick=\"send()\"></td>\r\n");
      out.write("      </tr>\r\n");
      out.write("   </table>\r\n");
      out.write("   </fieldset>\r\n");
      out.write("   </div>\r\n");
      out.write("\t<!-- 채팅 폼 끝 -->\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("   <!-- 채팅 -->   \r\n");
      out.write("   <script id=\"sochat\" type=\"text/javascript\">\r\n");
      out.write("   \r\n");
      out.write("   var textarea = document.getElementById(\"messageWindow\");\r\n");
      out.write("   var webSocket = new WebSocket('ws://localhost:8888/semi/broadcasting');\r\n");
      out.write("   var inputMessage = document.getElementById('inputMessage');\r\n");
      out.write("   var sender = \"");
      out.print( member.getMemberId() );
      out.write("\";\r\n");
      out.write("   var reciver = \"");
      out.print( reciver );
      out.write("\";       \r\n");
      out.write("        \r\n");
      out.write("       webSocket.onerror = function(event) {\r\n");
      out.write("         onError(event)\r\n");
      out.write("       };\r\n");
      out.write("       \r\n");
      out.write("       webSocket.onopen = function(event) {\r\n");
      out.write("         onOpen(event)\r\n");
      out.write("       };\r\n");
      out.write("       \r\n");
      out.write("       webSocket.onmessage = function(event) {\r\n");
      out.write("         onMessage(event)\r\n");
      out.write("       };\r\n");
      out.write("       \r\n");
      out.write("       function onMessage(event) {\r\n");
      out.write("    \t   var message = event.data.split(\",\");\r\n");
      out.write("    \t   if(message[0]==\"start\") {\r\n");
      out.write("    \t\t   textarea.value += message[1] + \"\\n\";\r\n");
      out.write("    \t   } else {\r\n");
      out.write("    \t   var otherReciver = message[0];\r\n");
      out.write("    \t   var otherSender = message[1];\r\n");
      out.write("    \t   var content = message[2];\r\n");
      out.write("    \t   if (otherReciver==reciver && otherSender==sender) {\r\n");
      out.write("           \t\ttextarea.value += reciver + \" : \" + content + \"\\n\";\r\n");
      out.write("           \t\ttextarea.scrollTop = textarea.scrollHeight;\r\n");
      out.write("    \t   }\r\n");
      out.write("    \t   }\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       function onOpen(event) {\r\n");
      out.write("           textarea.value += sender + \"님과 \" + reciver + \"님의 채팅방입니다.\\n\";\r\n");
      out.write("           /* var startMsg = sender + \"님과 \" + reciver + \"님의 채팅방입니다.\"\r\n");
      out.write("    \t   if(textarea.value==startMsg) {\r\n");
      out.write("    \t\t   webSocket.send(\"start,\"+sender+\"님이 입장하셨습니다.\");\r\n");
      out.write("    \t\t   textarea.value += \"\\n\"+sender+\"님이 입장하셨습니다.\\n\";\r\n");
      out.write("    \t\t   inputMessage.value = \"\";\r\n");
      out.write("    \t   }  */\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       function onError(event) {\r\n");
      out.write("          alert(event.data);\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       function send() {\r\n");
      out.write("           textarea.value += sender + \" : \" + inputMessage.value + \"\\n\";\r\n");
      out.write("           webSocket.send(sender+\",\"+reciver+\",\"+inputMessage.value);\r\n");
      out.write("           inputMessage.value = \"\";\r\n");
      out.write("           //채팅 전송시 항상 스크롤이가장 아래로  가게 설정\r\n");
      out.write("           textarea.scrollTop = textarea.scrollHeight;\r\n");
      out.write("       }    \r\n");
      out.write("  </script>  \r\n");
      out.write("  <!-- 채팅 끝 -->\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
